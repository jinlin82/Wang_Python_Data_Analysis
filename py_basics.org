* Python
*** Python Logo
#+DOWNLOADED: file:C%3A/Users/JL/Desktop/2016-11-30-000127.png @ 2016-11-30 23:06:20
[[file:images/2016-11-30-000127.png]]
*** Designer
#+DOWNLOADED: file:C%3A/Users/JL/Desktop/2016-11-30-000129.png @ 2016-11-30 23:09:05
[[file:images/2016-11-30-000129.png]]
*** Facts
     1. Designed by	Guido van Rossum, 
     2. First appeared	20 February 1991; 25 years ago
     3. Stable release：
	1. 3.5.2 / 27 June 2016; 5 months ago
	2. 2.7.12 / 28 June 2016; 5 months ago
     4. OS	Cross-platform
     5. License: free and open-source software
     6. Website: www.python.org
     7. " I chose Python as a working title for the project, being in a slightly irreverent mood (and a big fan of Monty Python's Flying Circus)."
*** 事实
     1. 设计者：Guido van Rossum, 
     2. 发行时间：	20 February 1991; 29 years ago
     3. 稳定版本：
	1. 3.5.2 / 27 June 2016; 5 months ago
	2. 2.7.12 / 28 June 2016; 5 months ago
     4. 操作系统：跨平台
     5. 许可证：免费和开源软件
     6. 官网: www.python.org
     7. "我之所以选择python作为程序的名字，是因为设计者Guido心情不佳（同时还因为Guido是英国肥皂剧《Monty Python 飞行马戏团》的粉丝）
  
*** Features and philosophy
     1. Python is a *multi-paradigm* programming language: 
	1. object-oriented programming
	2. structured programming
	3. and many language features support functional programming
	4. and many other paradigm
     1. The core philosophy of the language is summarized by the document The Zen of Python (PEP 20), which includes aphorisms such as:
	5. Beautiful is better than ugly
	6. Explicit is better than implicit
	7. Simple is better than complex
	8. Complex is better than complicated
	9. Readability counts

*** 特点与理念
     1. Python是一种*多范式*语言: 
	1. 面向对象的程序设计
	2. 结构化程序设计
	3. 而且许多语言特性都支持函数式编程
	4. 许多其它范式：
     1. 该语言的核心理念在文档The Zen of Python（PEP 20）中进行了概述，其中包括如下格言：
	5. 美丽胜于丑陋
	6. 明了胜于晦涩
	7. 简单胜于复杂
	8. 复杂胜于凌乱
	9. 可读性很重要
* Python Interpreter and IDE
** Console
*** Python.exe--Interactive Mode
     1. When commands are read from a tty, the interpreter is said to be in interactive mode.
     2. In this mode it prompts for the next command with the primary prompt, usually three greater-than signs (=>>>=);
     3. for continuation lines it prompts with the secondary prompt, by default three dots (...).
     4. Continuation lines are needed when entering a multi-line construct.      
*** IPython
     - IPython provides a rich toolkit to help you make the most of using Python interactively. Its main components are:
       1. A powerful interactive Python shell
       2. A Jupyter kernel to work with Python code in Jupyter notebooks and other interactive frontends.

** IDE
*** IDE
     1. IDLE
     2. Spyder
     3. Redeo
     4. Emacs
     5. PyCharm
     6. Other
* Python 解释器和集成开发环境
** 控制台
*** Python.exe--交互模式
     1. 当命令是从tty中读取的，这时解释器就是在所谓的交互模式。
     2. 在这个模式中它为下一个命令提供了主要提示, 经常是三个大于号 (=>>>=);
     3. 为延续行提供了次级提示，缺省是三个点 (...).
     4. 延续行是在输入一个多行的结构时需要的. 
*** IPython
     - IPythonIPython提供了一个丰富的工具包，可帮助您充分利用Python进行交互。它的主要组成部分是:
       1. 一个强大的python交互式shell 
       2. 一个Jupyter内核，可在Jupyter笔记本和其他交互式前端中使用Python代码

** 集成开发环境
*** 集成开发环境
     1. IDLE
     2. Spyder
     3. Redeo
     4. Emacs
     5. PyCharm
     6. 其它
* Control Flow and Functions
** Control Flow
*** =if= Statement
     1. The =if= statement is used for conditional execution:
     2. There can be zero or more =elif= parts, and the =else= part is optional. The
        keyword =elif= is short for =else if=, and is useful to avoid
        excessive indentation.       
*** =if= Statement example

* 控制流程和功能
** 控制流程
*** =if= 语句
     1. =if= 语句被用于条件执行:
     2. 可以有多个elif语句，关键词elif是else if的缩简写，用于缩减语句长度.
*** =if= 语句举例

#+BEGIN_SRC python
x = int(input("Please enter an integer: "))
if x < 0:
    x = 0
    print('Negative changed to zero')
elif x == 0:
    print('Zero')
elif x == 1:
    print('Single')
else:
    print('More'))

#+END_SRC

*** =for= Statements
     - Python’s for statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence.

*** =for= 语句
     - Python的for语句按照它们在序列中出现的顺序遍历每一个序列（列表或字符串）的项目。


#+BEGIN_SRC python :results output :exports both
words = ["cat", 'window', 'defenestrate']
for w in words:
    print(w, len(w))
""""""
#+END_SRC

#+RESULTS:
: cat 3
: window 6
: defenestrate 12

*** =range= Functions
     1. =range(stop)=
     2. =range(start, stop[, step])=
     3. This is a versatile function to create lists containing arithmetic progressions.
     4. It is most often used in for loops.
     5. The arguments must be plain integers.
     6. If the step argument is omitted, it defaults to 1.
     7. If the start argument is omitted, it defaults to 0. 

*** =range= 函数
     1. =range(stop)=
     2. =range(start, stop[, step])=
     3. 这是一个多功能函数，用于创建包含算术级数的列表.
     4. 它最常用于for循环.
     5. 参数必须是纯整数.
     6. 如果省略了step参数，则默认是1.
     7. 如果省略了start参数，则默认为0. 


*** COMMENT while, try and with Statements
*** COMMENT The range() Function
*** =break= and =continue= Statements
     1. The =break= statement, breaks out of the smallest enclosing for or while loop.
     2. The =continue= statement, continues with the next iteration of the loop

*** COMMENT pass Statements

*** =break= and =continue= 语句
     1. =break= 语句, 跳出最近的一级for或while循环.
     2. =continue= 语句, 跳转到循环的下一个迭代过程

*** COMMENT pass Statements

** Functions
*** Defining Functions
     1. The keyword =def= introduces a function definition.
     2. It must be followed by the function name and the parenthesized list of formal parameters.
     3. The statements that form the body of the function start at the next line, and must be indented.
     4. The first statement of the function body can optionally be a string literal; this string literal is the function’s documentation string, or docstring.
*** Examples

** 函数
*** 定义函数
     1. 函数代码块以def关键词开头.
     2. 后接函数名称和圆括号()，括号里面放形式参数.
     3. 构成函数主体的语句从下一行开始，并且必须缩进.
     4. 函数体的第一条语句可选为字符串; 这个字符串是该函数的文档字符串。
*** 示例

#+BEGIN_SRC python
def fib(n):    # write Fibonacci series up to n
    """Print a Fibonacci series up to n."""
    a, b = 0, 1
    while a < n:
        print a,
        a, b = b, a+b
#+END_SRC
     
*** COMMENT Argument type:
*** COMMENT Unpacking Argument Lists
*** COMMENT Lambda Expressions
*** COMMENT Documentation Strings
*** Coding Style: PEP8
     1. Most languages can be written (or more concise, formatted) in different styles; some are more readable than others.
     2. For Python, PEP8 has emerged as the style guide that most projects adhere to; it promotes a very readable and eye-pleasing coding style. 

*** 编程方式: PEP8
     1. 大多数语言可以用不同的风格来书写（或者更简洁，更格式化）。有些比其他更具可读性。.
     2. 对于Python，PEP8已成为大多数项目所遵循的样式指南。它是一种非常易读且令人赏心悦目的编码风格。. 

* Data Structures
** 数据类型
*** List
     1. comma-separated values (items) between square brackets *[ ]* . Lists might
        contain items of different types, but usually the items all have the
        same type.
     2. lists can be indexed and sliced.
     3. lists are a mutable type, i.e. it is possible to change their content.
     4. The list data type has some more methods, use =dir(L)= to show these mothods.
     5. =.remove=: Remove the first item from the list whose value is x. It is an error if there is no such item.
     6. the =del= statement: remove an item from a list given its index instead of its value.

* 数据结构
** 数据类型
*** 列表
     1. 在python中，用一对方括号 *[ ]* 来表示列表。列表除了能放相同类型的数据，也能放不同的数据.也就是说列表不限制数据类型.
     2. 列表也可以被索引和切片.
     3. 列表是可变类型，也就是说，可以改变它们的内容.
     4. 列表数据类型还有更多方法，可使用 =dir(L)= 来显示这些方法.
     5. =.remove=: 从列表中删除值为x的第一项。 如果没有这样的项，则是错误的.
     6. =del= 语句: 从给定其索引而不是其值的列表中删除项.

*** Tuple
     1. A tuple consists of a number of values separated by commas.on output tuples are always enclosed in parentheses *()* .
     2. Tuples are *immutable*, and usually contain a heterogeneous sequence of elements.
     3. the construction of tuples containing 0 or 1 items:
	1. Empty tuples are constructed by an empty pair of parentheses;
	2. a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses).

 *** 元组
     1. 元组由一组用逗号分隔的值组成。在输出时，元组总是用括号 *()* 括起来  .
     2. 元组是“不可变的”，通常包含一个异类型的序列.
     3. 包含0或1个项目的元组的构造:
	1. 空元组由一对空括号构成;
	2. 要创建一个单元素元组可以在值后面跟一个逗号（在括号中放入一个单值是不够的）.
*** sequence packing and unpacking
     1. The statement t = 12345, 54321, 'hello!' is an example of tuple packing: the values 12345, 54321 and 'hello!' are packed together in a tuple.
     2. x, y, z = t, This is called sequence unpacking and works for any sequence on the right-hand side.
     3. Sequence unpacking requires the list of variables on the left to have the same number of elements as the length of the sequence.

*** 序列封装与拆封
     1. 语句t = 12345, 54321, 'hello!' 是元封装的一个例子: 值 12345, 54321 和 'hello!' 被封装到一个元组里面.
     2. x, y, z = t, 这被称为元祖拆封，并且对右边的任何序列都成立.
     3. 序列拆封要求左侧的变量数目与序列的元素个数相同.

*** Set
     1. Python also includes a data type for sets.
     2. A set is an unordered collection with no duplicate elements.
     3. Basic uses include membership testing and eliminating duplicate entries.
     4. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.
     5. the =set()= function can be used to create sets.
     6. *Note*: to create an empty set you have to use =set()=, not =\{\}=; the latter creates an empty dictionary
*** Examples
*** 集合
     1. Python还包含了一种数据类型——集合.
     2. 集合是一个无序无重复元素的集.
     3. 基本功能包括关系测试和消除重复元素.
     4. 集合对象还支持并、交、差、和对称差集等数学运算
     5. =set()= 可以用于创建集合.
     6. *注意*: 如果要创建一个空集合，必须用 =set()=, 而不是 =\{\}=; 后者创建一个空的字典。
*** 举例
#+BEGIN_SRC python
basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
fruit = set(basket)               # create a set without duplicates
fruit
set(['orange', 'pear', 'apple', 'banana'])
'orange' in fruit                 # fast membership testing
'crabgrass' in fruit

# Demonstrate set operations on unique letters from two words
a = set('abracadabra')
b = set('alacazam')
a                                  # unique letters in a
a - b                              # letters in a but not in b
a | b                              # letters in either a or b
a & b                              # letters in both a and b
a ^ b                              # letters in a or b but not both

""""""
#+END_SRC
     
*** Dictionary
     1. Unlike sequences, which are indexed by a range of numbers, dictionaries
        are indexed by keys, which can be any immutable type; strings and
        numbers can always be keys.
     2. A pair of braces creates an empty dictionary: =\{\}=. Placing a
        comma-separated list of key:value pairs within the braces adds initial
        key:value pairs to the dictionary;

*** Examples

*** 字典
     1. 序列是以连续的整数为索引，与此不同的是，字典以关键字为索引，关键字可以是任意不可变类型，通常用字符串或数值.
     2. 一对大括号=\{\}=创建一个空字典;在大括号中放置以逗号分隔的键:带有大括号的值对添加了初始键：字典的值对；

*** 举例  

#+BEGIN_SRC python
tel = {'jack': 4098, 'sape': 4139}
tel['guido'] = 4127
tel
{'sape': 4139, 'guido': 4127, 'jack': 4098}
tel['jack']
4098
del tel['sape']
tel['irv'] = 4127
tel
{'guido': 4127, 'irv': 4127, 'jack': 4098}
tel.keys()
['guido', 'irv', 'jack']
'guido' in tel

#+END_SRC
** 切片与索引
*** Index(索引) and Slice(切片)
     - 在Python中，list, tuple以及字符串等可以遍历访问的类型都可以应用slice访问， Python使用 [] 来对有序序列进行索引。
     - slice本身的意思是指切片，在这些可以遍历访问的类型中截取其中的某些部分。
     - 负整数索引是从尾部开始取

#+BEGIN_SRC python
x = list(range(10))
x[2]
x[1:5]  
x[-1]
x[2:-2]
""""""
#+END_SRC
     - [@3] 注意：
       1. 所取的slice是一个 *半开半闭* 的区间： ~l[a:b]==> l[a, b)~.
       2. 下标是从0开始，不是从1开始.
*** 如何包含列表中最后一个元素
     1. 使用超过列表长度的索引
     2. 可以列出的访问下标值超出数组长度范围，不会造成越界错误，只不过仅仅返回能遍历到的元素而已
     3. 另外一种办法，使用省略

#+BEGIN_SRC python :eval yes
x[0:11]
x[0:12]
x[0:]
x[:]
""""""
#+END_SRC
*** 倒序取元素
     1. 用 =x[a:b]= 的方式来访问元素来看，我们这里 a, b 取的值要么满足0<= a <= b 或者 a >= 0, b < 0。实际上，a所对应元素的位置总是在b所对应位置的前面。
     2. 如果a所对应元素的位置总是在b所对应位置的后面，并不是所期望的返回一个倒过来的数组，而是返回一个空的数组。

#+BEGIN_SRC python :eval yes
x[3:1]
x[-1:1]
""""""
#+END_SRC
*** extended slice
     1. =x[a:b:step]= slice of x from i to j with step k
     2. 如果a在b前面，step 要取正数，否则取的切片为空
     3. 如果a在b后面，step 要取负数，否则取的切片为空

#+BEGIN_SRC python :eval yes
x[1:7:2]
x[1:7:-2]
x[7:1:2]
x[7:1:-2]
x[::-1]
""""""
#+END_SRC
*** 总结
     1. 在 =x[a:b]= 的情况下，必须保证a所在的索引位置在前，b所在的索引位置在后，否则返回结果为空。
     2. 在 =x[a:b:step]= 的情况下，我们首先要根据a, b的位置来判断方向，a在前，b在后的话，step应该为正，否则应该为负。
     3. 不符合这些情况的话，则返回空的数组。也就是说，看a, b的位置来确定方向，不要犯方向性的错误
* Module
*** Module
     1. A module is a file containing Python definitions and statements.
     2. The file name is the module name with the suffix .py appended.
*** 模块
     1. 模块是一个包含一些Python定义和语句的文件
     2. 文件名就是模块名后面添加后缀 .py
*** Package
     1. Packages are a way of structuring Python’s module namespace by using
        “dotted module names”.
     2. For example, the module name A.B designates a submodule named B in a package named A. 
*** 包
     1. 包是一种通过使用“.模块名”来构造 Python 模块命名空间的方式。
     2. 例如，模块名A.B表示A包中名称为B的子模块。 
*** library
     - Python has a large standard library, commonly cited as one of Python's
        greatest strengths,providing tools suited to many tasks.
     - This is deliberate and has been described as a "batteries included" Python
        philosophy.
     - For Internet-facing applications, many standard formats and protocols (such as MIME and HTTP) are supported.
     - Modules for creating graphical user interfaces, connecting to relational       databases, pseudorandom number generators, arithmetic with arbitrary           precision decimals, manipulating regular expressions, and doing unit testing   are also included.
*** 库
     - Python有一个大型的标准库，被认为是Python的最大优势之一，提供了适合许多任
       务的工具
     - 复杂且功能强大，被描述为“功能齐全”的Python哲学
     - 对于面向互联网的应用程序，支持许多标准格式和协议（例如MIME和HTTP）。
     - 包含用于创建图形用户界面，连接到关系数据库，伪随机数生成器，精确到任意小数的算术，
       操作正则表达式以及进行单元测试的模块。        
*** Module import
     1. =import module1, module2=
	- Using the module name we can access the function using dot (.) operation.

#+BEGIN_SRC python :eval yes
import math
math.sin(3)
""""""
#+END_SRC

     1. [@2] =import modname as mm= 
     2. =from modname import name1, name2=
     3. =from modname import *=
*** 模块导入
     1. =import module1, module2=
	- 通过模块名加点(.)访问函数

#+BEGIN_SRC python :eval yes
import math
math.sin(3)
""""""
#+END_SRC

     1. [@2] =import modname as mm= 
     2. =from modname import name1, name2=
     3. =from modname import *=
*** PyPI - the Python Package Index
     - As of November, 2016, the Python Package Index, the official repository
        containing third-party software for Python, contains over 92,000
        packages offering a wide range of functionality, including:
	1. graphical user interfaces, web frameworks, multimedia, databases, networking and communications
	2. test frameworks, automation and web scraping, documentation tools, system administration
	3. scientific computing, text processing, image processing
*** PyPI - Python包索引
     - 截至2016年11月，Python软件包索引（包含用于Python的第三方软件的官方存储库）
       包含92,000多个软件包，可提供广泛的功能，其中包括：
	1. 图形用户界面、网络框架、多媒体、数据库、网络和通信
	2. 测试框架、自动化和web抓取、文档工具、系统管理
	3. 科学计算，文本处理，图像处理
*** The dir() Function
     1. The built-in function dir() is used to find out which names a module
        defines.
     2. Without arguments, dir() lists the names you have defined currently:
*** dir()函数
     1. 内置函数 dir() 用于查找模块定义的名称。
     2. 不带参数的dir（）列出当前定义的名称:     
*** 查看modules
     - 查看内置函数(builtin 模块中的函数)： ~dir(__builtin__)~
     - 查看内置模块(written in C and built in to the Python interpreter)： ~sys.builtin_module_names~
     - 查看标准模块： 
       1. CMD中 ~pip install stdlib-list~
       2. ~>>> from stdlib_list import stdlib_list~
       3. ~>>> libraries = stdlib_list("2.7")~
     - 查看所有安装的模块： ~help("modules")~ , CMD 中 ~pip list~
     - 查看当前加载的模块： ~dir()~; ~sys.modules.keys()~

*** 查看某一 package 中所有子包和子模块
     - 使用标准库中的 =pkgutil= 库，如列出 =numpy= 中的所有子包(sub packges)和子模块(sub modules)

#+BEGIN_SRC python :eval yes
import pkgutil
import numpy

for importer, modname, ispkg in pkgutil.iter_modules(numpy.__path__, prefix="numpy."):
    print(modname)

""""""
#+END_SRC

* Class
*** 简介
     1. use functions to organize code and built-in types to organize data.
     2. "object-oriented programming"： uses programmer-defined types to organize both code and data.
     3. Python's built-in types:
	1. list
	2. tuple
	3. dict
	4. set
* 类
*** 简介
     1. 使用函数组织代码，使用内置类型组织数据
     2. “面向对象编程”：使用程序员定义的类型来组织代码和数据。
     3. Python内置类型:
	1. list
	2. tuple
	3. dict
	4. set 
*** programmer-defined type: class
     1. A programmer-defined type is also called a *class*. A class definition looks like this:

#+BEGIN_SRC python
class Point:
    """Represents a point in 2-D space."""
Point()
""""""
#+END_SRC



    1. [@2] The header indicates that the new class is called Point .
    2. The body is a docstring that explains what the class is for.
    3. You can define variables and methods inside a class definition.
*** 程序员定义的类型: class
     1. 程序员定义的类型也称为 *class*. 类的定义类似如下:

#+BEGIN_SRC python
class Point:
    """Represents a point in 2-D space."""
Point()
""""""
#+END_SRC



    1. [@2] 开头表示创建一个新类 Point
    2. 主体是一个字符串，用于解释该类的作用
    3. 可以在类定义中定义变量和方法    
*** object
     1. Defining a class named ~Point~ creates a class object:

#+BEGIN_SRC python :eval no
>>> Point
<class '__main__.Point'>
#+END_SRC

     3. [@2] The class object is like a factory for creating objects.
     4. To create a Point, you call Point as if it were a function

#+BEGIN_SRC python :eval no
>>> blank = Point()
>>> blank
<__main__.Point object at 0xb7e9d3ac>
#+END_SRC
*** 对象
     1. 定义一个名为~Point~的类会创建一个类对象:

#+BEGIN_SRC python :eval no
>>> Point
<class '__main__.Point'>
#+END_SRC

     3. [@2] 类对象就像一个创建对象的工厂。
     4. 要创建Point，可以将Point当作函数来调用

#+BEGIN_SRC python :eval no
>>> blank = Point()
>>> blank
<__main__.Point object at 0xb7e9d3ac>
#+END_SRC
*** instance
     1. The return value is a reference to a Point object, which we assign to blank.
     2. Creating a new object is called *instantiation*, and the object is an *instance* of the class.
     3. When you print an instance, Python tells you what class it belongs to and where it is stored in memory
     4. (the prefix 0x means that the following number is in hexadecimal).
     5. Every object is an instance of some class, so “object” and “instance” are interchangeable.
*** 实例
     1. 返回值是对Point对象的引用，我们将其指定为空。
     2. 创建一个新对象称为 *实例化*, 这个对象是类的 *实例* 
     3. 当你输出一个实例时，Python会告诉你它属于哪个类以及存储的位置
     4. (前缀 0x 表示以下数字为十六进制)
     5. 每个对象都是某个类的实例，因此“对象”和“实例”是可以互换的。     
*** Attributes
     1. You can assign values to an instance using dot notation:

#+BEGIN_SRC python :eval no
>>> blank.x = 3.0
>>> blank.y = 4.0
#+END_SRC

     2. [@2] These elements are called attributes.
     3. You can read the value of an attribute using the same syntax:
#+BEGIN_SRC python :eval no
>>> blank.y
4.0
>>> x = blank.x
>>> x
3.0
#+END_SRC
*** 属性
     1. 实例后加点(.)对变量进行赋值

#+BEGIN_SRC python :eval no
>>> blank.x = 3.0
>>> blank.y = 4.0
#+END_SRC

     2. [@2] 这些元素称为属性。
     3. 使用相同的语法读取属性值：
#+BEGIN_SRC python :eval no
>>> blank.y
4.0
>>> x = blank.x
>>> x
3.0
#+END_SRC
*** Functions
     1. Pure Function
	- a pure function does not modify any of the objects passed to it as
          arguments and it has no effect, like displaying a value or getting
          user input, other than returning a value.
     2. Modifiers
	- a function to modify the objects it gets as parameters.
*** 函数
     1. 纯函数
	- 纯函数的返回结果只依赖于它自己的参数，函数执行过程里面没有副作用，输入相同的参数，
       返回同样的结果
     2. 修饰符
	- 修改作为参数获取的对象的函数。     
*** Methods
     - a *method* is a function that is associated with a particular class.

#+BEGIN_SRC python :eval yes
a=[1,2,3]
import numpy as np
a=np.array(a)
a+1
""""""
#+END_SRC

     - a method is called right after it is bound:

=x.f()=
*** 方法
     - *方法*是与特定类关联的函数。

#+BEGIN_SRC python :eval yes
a=[1,2,3]
import numpy as np
a=np.array(a)
a+1
""""""
#+END_SRC

     - 方法在绑定后立即被调用：

=x.f()=
*** Methods and Functions 
     - Methods are semantically the same as functions, but there are two syntactic differences:
       1. Methods are defined inside a class definition in order to make the
          relationship between the class and the method explicit.
       2. The syntax for invoking a method is different from the syntax for calling a function.
     - Methods and functions can be changed from one form to another, you can
       choose the best form for whatever you are doing.
*** 方法和函数 
     - 方法在语义上与函数相同，但是在语法上有两个区别：
       1. 在类定义内定义方法，以使类与方法之间的关系明确。
       2. 调用方法的语法与调用函数的语法不同。
     - 方法和函数的形式可以相互更改，可以根据自己的工作选择最佳形式。       
*** Magic Methods
     1. They are special methods with fixed names. They are the methods with this clumsy syntax, i.e. the double underscores at the beginning and the end.
     2. don't have to invoke magic methods directly. The invocation is realized behind the scenes. 
     3. By convention, the first parameter of a method is called *self* and the second parameter *other*.
     4. The *init* method (short for “initialization”) is a special method that gets invoked when an object is instantiated.
     5. The *str* is a special method, like init, that is supposed to return a string representation of an object(with =print= function).
*** 魔术方法
     1. 它们是具有固定名称的特殊方法。 它们具有笨拙语法，以"_"(双下划线)作为名
        字的开头和结尾
     2. 不用直接调用魔术方法。 调用是在后台实现的。
     3. 按照惯例，方法的第一个参数称为 *self*，第二个参数称为 *other*。
     4. *init* 方法（“initialization”的缩写）是一种特殊的方法，在实例化
        对象时会调用该方法。
     5. *str* 是一种特殊的方法，如init一样，应该返回对象的字符串表示形式
       （带有 =print = 函数）。     
* Brief Tour of the Standard Library
*** Operating System Interface
     1. The os module provides dozens of functions for interacting with the
        operating system.
     2. For daily file and directory management tasks, the shutil module
        provides a higher level interface that is easier to use
     3. use dir() and help() 函数
*** 操作系统接口
     1. os模块提供了许多与操作系统交互的函数。
     2. 对于日常的文件和目录管理任务，shuil模块提供了更高级别的接口，更易于使用
     3. 使用 dir() and help() 函数
*** String Pattern Matching
     1. The re module provides regular expression tools for advanced string processing. For complex matching and manipulation, regular expressions offer succinct, optimized solutions:
     2. When only simple capabilities are needed, string methods are preferred because they are easier to read and debug
*** 字符串模式匹配
     1. re模块为高级字符串处理提供正则表达式工具。对于复杂的匹配和操作，正则表达
        式提供简洁、优化的解决方案：
     2. 当仅需要简单的功能时，首选字符串方法，因为它们更易于阅读和调试。
*** Mathematics
     1. The math module gives access to the underlying C library functions for floating point math:
     2. The random module provides tools for making random selections:
     3. The decimal module offers a Decimal datatype for decimal floating point arithmetic.
*** 数学运算
     1. math模块可访问用于浮点数学运算的基础C库函数；
     2. 随机模块提供了用于进行随机选择的工具；
     3. 十进制模块为十进制浮点运算提供了十进制数据类型。
*** Tools for Working with Lists
     1. The array module provides an array() object that is like a list that stores only homogeneous data and stores it more compactly.
     2. The collections module provides a deque() object that is like a list with faster appends and pops from the left side but slower lookups in the middle. These objects are well suited for implementing queues and breadth first tree searches:
*** 用于列表的工具
     1. 数组模块提供了一个array()对象，该对象类似列表，仅存储同类数据且更加简洁
     2. 集合模块提供了一个deque()对象，该对象类似列表，能更快地从左侧添加和抛出，但在
        中间的查找较慢。 这些对象非常适合实现队列和广度优先树搜索：
*** CSV File Reading and Writing
     1. The csv module implements classes to read and write tabular data in CSV format.
     2. It allows programmers to say, “write this data in the format preferred by Excel,” or “read data from this file which was generated by Excel,” without knowing the precise details of the CSV format used by Excel. Programmers can also describe the CSV formats understood by other applications or define their own special-purpose CSV formats.
     3. The csv module’s reader and writer objects read and write sequences.
*** CSV 文件读取和写入
     1. csv模块实现了以csv格式读写表格数据的类。
     2. 它使程序员可以说“Excel首选这种格式写入数据”，或“从Excel生成的文件中读取数据”，
        而无需知道Excel使用的CSV格式的确切细节。程序员还可以描述其他应用程序理解的CSV格式，或者定义自己专用的CSV格式。
     3. csv模块的读取器和写入器对象可以读取和写入序列。
*** Structured Markup Processing and Web Tools
     1. HTMLParser defines a class HTMLParser which serves as the basis for parsing text files formatted in HTML (HyperText Mark-up Language) and XHTML.
     2. xml pakcages.
     3. The webbrowser module provides a high-level interface to allow displaying Web-based documents to users. Under most circumstances, simply calling the open() function from this module will do the right thing.
     4. urllib module provides a high-level interface for fetching data across the World Wide Web. In particular, the urlopen() function is similar to the built-in function open(), but accepts Universal Resource Locators (URLs) instead of filenames.
*** 结构化标记处理和Web工具
     1. HTMLParser定义了一个HTMLParser类，该类用作解析HTML（超文本标记语言）
        和XHTML格式文本文件的基础。
     2. xml 包.
     3. webbrowser模块提供了高级界面，以允许向用户显示基于Web的文档。 在大多
        数情况下，只需从此模块调用open（）函数就行。
     4. urllib模块提供了用于在万维网上获取数据的高级接口。 特别是，urlopen（）函数
        与内置函数open（）类似，但是接受通用资源定位符（URL）而不接受文件名。     

*** Batteries Included
     1. Python has a “batteries included” philosophy.
     2. This is best seen through the sophisticated and robust capabilities of its larger packages.
     3. See The Python Standard Library
*** Batteries Included（自备全套工具）
     1. Python有"功能齐全”的理念。
     2. 最好的解决方案是通过其较大包的复杂和强大功能实现的。
     3. 参阅Python标准库    

* 注意事项
*** 运算
     1. 3/2  3.0/2
     2. The return type of a division (/) operation depends on its operands. If
        both operands are of type int, floor division is performed and an int is
        returned. If either operand is a float, classic division is performed
        and a float is returned.
     3. it is possible to use the ** operator to calculate powers
     4. In interactive mode, the last printed expression is assigned to the variable _.
*** 运算
     1. 3/2  3.0/2
     2. 除（/）运算的返回类型取决于其运算对象。如果两个运算对象均为int类型，
        则执行地板除法并返回int类型。 如果有任何一个操作数是浮点数则执行传统除法并返回浮点数。
     3. 可以使用**运算符来计算功效
     4. 在交互模式下，最后输出的表达式分配给变量_。
*** multiple assignment
     1. a, b = 0, 1: the variables a and b simultaneously get the new values 0 and 1.
     2. a, b = b, a+b: expressions on the right-hand side are all evaluated
        first before any of the assignments take place. The right-hand side
        expressions are evaluated from the left to the right.
*** 多重分配
     1. a，b = 0，1：变量a和b同时获得新值0和1。
     2. a，b = b，a + b：在进行任何赋值之前，将首先计算右侧的表达式。右侧
        表达式从左到右计算。
*** indentation
     1. indentation is Python’s way of grouping statements.
     2. At the interactive prompt, you have to type a tab or space(s) for each indented line.
     3. In practice you will prepare more complicated input for Python with a text editor; all decent text editors have an auto-indent facility.
     4. When a compound statement is entered interactively, it must be followed by a blank line to indicate completion (since the parser cannot guess when you have typed the last line).
     5. Note that each line within a basic block must be indented by the same amount.
*** 缩进
     1. 缩进是Python对语句进行分组的方式。
     2. 在交互式提示下，您必须为每个缩进的行键入一个制表符或空格。
     3. 在实践中，使用文本编辑器为Python准备更复杂的输入。所有较好的文本编
        辑器都具有自动缩进功能。
     4. 以交互方式输入复合语句时，必须在其后跟随一个空行以表示完成（因为解析
        器无法猜测何时键入了最后一行）。
     5. 请注意，基本块中的每一行都必须缩进相同的大小。    

* Export Configuration 					   :noexport:ARCHIVE:
#+LATEX_CLASS_OPTIONS: [11pt,xcolor=dvipsnames,aspectratio=43,hyperref={bookmarksdepth=4}]
# +LATEX_CLASS_OPTIONS: \\documentclass[UTF8,a4paper,12pt]{ctexart}  % Latex 去掉上面的语句，加上本语句
#+LaTeX_HEADER_EXTRA: % -------------------------- Document Title -----------------------------
#+LATEX_HEADER_EXTRA: \usepackage{titling}
#+LATEX_HEADER_EXTRA: \pretitle{\begin{center}\vskip -1em\Large\textbf}
#+LATEX_HEADER_EXTRA: \posttitle{\thanks{\textbf{基金项目}：中南财经政法大学基本科研业务费青年教师创新项目（20132049）；中南财经政法大学2013年实验教学项目《统计学实验课程动态图示项目建设》}\par\end{center}}
#+LATEX_HEADER_EXTRA: \preauthor{\begin{center}\CJKfamily{kai}
#+LATEX_HEADER_EXTRA: \lineskip -1em%
#+LATEX_HEADER_EXTRA: \begin{tabular}[t]{c}}
#+LATEX_HEADER_EXTRA: \postauthor{\end{tabular}\par\end{center}}
#+LATEX_HEADER_EXTRA: \predate{\begin{center}\CJKfamily{kai}\vskip -1.2em}
#+LATEX_HEADER_EXTRA: \postdate{\par\end{center}\vskip -2em}
#+LaTeX_HEADER_EXTRA: % ------------------------Chapter Section Title-------------------------
#+LaTeX_HEADER_EXTRA: \usepackage{titlesec}
#+LaTeX_HEADER_EXTRA: \titleformat{\section}{\large\bfseries}{\thesection}{1em}{}
#+LaTeX_HEADER_EXTRA: \titleformat{\subsection}{\normalsize\bfseries}{\thesubsection}{0.5em}{}
#+LaTeX_HEADER_EXTRA: \titlespacing{\section}{0pt}{1ex plus 1ex minus .2ex}{1ex plus 1ex minus .2ex}
#+LaTeX_HEADER_EXTRA: \titlespacing{\subsection}{0pt}{0.5ex plus 1ex minus .2ex}{0.5ex plus 1ex minus .2ex}
#+LaTeX_HEADER_EXTRA: % ------------------------Figure and Table Caption---------------------
#+LaTeX_HEADER_EXTRA: \makeatletter                        % 图表标题格式设置
#+LaTeX_HEADER_EXTRA: \renewcommand{\fnum@table}[1]{\small \bfseries\textcolor{Violet}{\tablename\thetable~~}}
#+LaTeX_HEADER_EXTRA: \renewcommand{\fnum@figure}[1]{\small \CJKfamily{hei} \textcolor{Violet}{\figurename\thefigure~~}}
#+LaTeX_HEADER_EXTRA: \makeatother
#+LaTeX_HEADER_EXTRA: \renewcommand{\thefigure}{\arabic{figure}}
#+LaTeX_HEADER_EXTRA: \renewcommand{\thetable}{\arabic{table}}
#+LaTeX_HEADER_EXTRA: \newcommand{\HRule}{\rule{\linewidth}{0.5mm}}
#+LaTeX_HEADER_EXTRA: % -----------------------------Ref and Bib----------------------------
#+LaTeX_HEADER_EXTRA: \usepackage[super,square,sort&compress]{natbib}      % 参数代表：数字和排序与压缩
#+LaTeX_HEADER_EXTRA: \setlength{\bibsep}{0ex}                             % 参考文献中行距缩小

#+LaTeX_HEADER_EXTRA: \usepackage[top=2cm,bottom=2cm,left=3cm,right=3cm]{geometry}
#+LaTeX_HEADER_EXTRA: \sloppy
#+LaTeX_HEADER_EXTRA: \linespread{1.1}                    % 设置行距
#+LaTeX_HEADER_EXTRA: \setlength{\parindent}{24pt}        % 段落缩进
#+LaTeX_HEADER_EXTRA: \setlength{\parskip}{1ex plus 0.5ex minus 0.2ex}
#+LaTeX_HEADER_EXTRA: \pagestyle {plain}                  % 去掉页眉
#+LaTeX_HEADER_EXTRA: \usepackage{enumitem}               % 设置item间距
#+LaTeX_HEADER_EXTRA: \setitemize[1]{itemsep=0pt,partopsep=0pt,parsep=\parskip,topsep=5pt}  % 设置item间距
#+LaTeX_HEADER_EXTRA: \setenumerate[1]{itemsep=0pt,partopsep=0pt,parsep=\parskip,topsep=5pt} % 设置枚举间距
# +LaTeX_HEADER_EXTRA: \floatsetup[table]{style=plain,capposition=top,font=small}% 在.emacs文件中加载的floatsetup包取代了float包
# +LATEX_HEADER: \author{\CJKfamily{kai} 金\quad 林 \\ \normalsize \CJKfamily{kai} （中南财经政法大学\, 统计与数学学院\, 湖北\, 武汉\, 430073）}
#+LATEX_HEADER: \author{\CJKfamily{kai} 金 \enspace 林 \\ \CJKfamily{kai} 中南财经政法大学统计系 \\ jinlin82@qq.com}


#+BEAMER_HEADER: \usetheme{default}
#+BEAMER_HEADER: \useinnertheme[shadow]{rounded}
#+BEAMER_HEADER: \useoutertheme{infolines}
#+BEAMER_HEADER: \usecolortheme{seahorse}
#+BEAMER_HEADER: \setbeamercolor{frametitle}{fg=Blue, bg=white}
#+BEAMER_HEADER: \setbeamercolor{titlelike}{parent=structure}
#+BEAMER_HEADER: \setbeamertemplate{caption}[numbered]
#+BEAMER_HEADER: \setbeamertemplate{section in toc shaded}[default][50]
#+BEAMER_HEADER: \setbeamertemplate{subsection in toc shaded}[default][20]
# +BEAMER_HEADER: \setbeamertemplate{section in toc}[circle]
#+BEAMER_HEADER: \setbeamertemplate{subsection in toc}[square]
#+BEAMER_HEADER: \logo{\includegraphics[height=0.6cm,width=0.6cm]{znufelogo.jpg}}
#+BEAMER_HEADER: \setbeamercovered{transparent}
#+BEAMER_HEADER: \setCJKmainfont[BoldFont={* Bold}]{Microsoft YaHei}
#+BEAMER_HEADER: \usefonttheme[onlylarge]{structuresmallcapsserif}
#+BEAMER_HEADER: \usefonttheme[onlymath]{serif}
#+BEAMER_HEADER: \setbeamertemplate{frametitle}{\bfseries\insertframetitle\par\vskip-6pt}

#+BEAMER_HEADER: \AtBeginSection[]
#+BEAMER_HEADER: {
#+BEAMER_HEADER: \setcounter{tocdepth}{2}
#+BEAMER_HEADER: \frame[shrink=5]{\tableofcontents[currentsection, hideothersubsections]}
#+BEAMER_HEADER: }
#+BEAMER_HEADER: \AtBeginSubsection[] % Do nothing for \subsection*
#+BEAMER_HEADER: {
#+BEAMER_HEADER: \begin{frame}<beamer>
#+BEAMER_HEADER: \frametitle{}
#+BEAMER_HEADER: \Large \tableofcontents[currentsubsection,sectionstyle=hide/hide, subsectionstyle=show/shaded/hide]
#+BEAMER_HEADER: \end{frame}
#+BEAMER_HEADER: }
#+BEAMER_HEADER: \setlength{\parskip}{1ex plus 0.5ex minus 0.2ex}
#+BEAMER_HEADER: \author[金\; 林(中南财经政法大学统计系)]{\CJKfamily{kai} 金 \enspace 林 \\ 中南财经政法大学统计系 \\ jinlin82@qq.com}

#+AUTHOR:  金 \nbsp 林 \\ 中南财经政法大学统计系 \\ jinlin82@qq.com
#+EMAIL: jinlin82@qq.com
# +DATE: 2014年9月10日
#+OPTIONS: H:3 toc:nil num:4 LaTeX:nil ^:{} email:nil tex:t author:nil arch:nil DATE:t
#+TITLE:  Python 基础

#+PROPERTY: header-args :tangle yes

